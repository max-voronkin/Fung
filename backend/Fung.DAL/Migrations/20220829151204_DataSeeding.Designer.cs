// <auto-generated />
using System;
using Fung.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Fung.DAL.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220829151204_DataSeeding")]
    partial class DataSeeding
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseSerialColumns(modelBuilder);

            modelBuilder.Entity("Fung.COMMON.Entities.FuelTank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<double>("Capacity")
                        .HasColumnType("double precision");

                    b.Property<double>("CurrentAmount")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<int>("StationId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("StationId");

                    b.ToTable("FuelTanks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacity = 10.0,
                            CurrentAmount = 5.5,
                            Name = "illum",
                            Number = 1,
                            StationId = 1,
                            UpdatedAt = new DateTime(2022, 8, 29, 15, 12, 4, 122, DateTimeKind.Utc).AddTicks(3477)
                        },
                        new
                        {
                            Id = 2,
                            Capacity = 10.0,
                            CurrentAmount = 6.5,
                            Name = "earum",
                            Number = 2,
                            StationId = 1,
                            UpdatedAt = new DateTime(2022, 8, 29, 15, 12, 4, 122, DateTimeKind.Utc).AddTicks(3529)
                        },
                        new
                        {
                            Id = 3,
                            Capacity = 10.0,
                            CurrentAmount = 7.5,
                            Name = "hic",
                            Number = 3,
                            StationId = 1,
                            UpdatedAt = new DateTime(2022, 8, 29, 15, 12, 4, 122, DateTimeKind.Utc).AddTicks(3540)
                        });
                });

            modelBuilder.Entity("Fung.COMMON.Entities.LevelIndicatorTransactions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<double>("Density")
                        .HasColumnType("double precision");

                    b.Property<int>("FuelTankId")
                        .HasColumnType("integer");

                    b.Property<double>("Height")
                        .HasColumnType("double precision");

                    b.Property<decimal>("Temperature")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("TransactionTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Volume")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("FuelTankId");

                    b.ToTable("LevelIndicatorTransactions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Density = 203.76581116376369,
                            FuelTankId = 1,
                            Height = 9.8000000000000007,
                            Temperature = 24m,
                            TransactionTime = new DateTime(2022, 8, 29, 15, 12, 4, 128, DateTimeKind.Utc).AddTicks(4201),
                            Volume = 2.8529461505992781
                        },
                        new
                        {
                            Id = 2,
                            Density = 177.58433055769385,
                            FuelTankId = 1,
                            Height = 9.6999999999999993,
                            Temperature = 19m,
                            TransactionTime = new DateTime(2022, 8, 29, 15, 12, 4, 128, DateTimeKind.Utc).AddTicks(4263),
                            Volume = 0.59478387491236462
                        },
                        new
                        {
                            Id = 3,
                            Density = 942.02445390075172,
                            FuelTankId = 1,
                            Height = 9.5999999999999996,
                            Temperature = 26m,
                            TransactionTime = new DateTime(2022, 8, 29, 15, 12, 4, 128, DateTimeKind.Utc).AddTicks(4272),
                            Volume = 8.7698562379961391
                        },
                        new
                        {
                            Id = 4,
                            Density = 884.59515306240723,
                            FuelTankId = 2,
                            Height = 9.5,
                            Temperature = 8m,
                            TransactionTime = new DateTime(2022, 8, 29, 15, 12, 4, 129, DateTimeKind.Utc).AddTicks(9504),
                            Volume = 1.7106051817490953
                        },
                        new
                        {
                            Id = 5,
                            Density = 455.81095015875485,
                            FuelTankId = 2,
                            Height = 9.4000000000000004,
                            Temperature = 20m,
                            TransactionTime = new DateTime(2022, 8, 29, 15, 12, 4, 129, DateTimeKind.Utc).AddTicks(9608),
                            Volume = 1.041288474118679
                        },
                        new
                        {
                            Id = 6,
                            Density = 768.04733485540885,
                            FuelTankId = 2,
                            Height = 9.3000000000000007,
                            Temperature = 10m,
                            TransactionTime = new DateTime(2022, 8, 29, 15, 12, 4, 129, DateTimeKind.Utc).AddTicks(9617),
                            Volume = 6.8812724686393301
                        },
                        new
                        {
                            Id = 7,
                            Density = 538.83911467476287,
                            FuelTankId = 3,
                            Height = 9.1999999999999993,
                            Temperature = 28m,
                            TransactionTime = new DateTime(2022, 8, 29, 15, 12, 4, 131, DateTimeKind.Utc).AddTicks(3513),
                            Volume = 1.2921261579447063
                        },
                        new
                        {
                            Id = 8,
                            Density = 458.72929975343266,
                            FuelTankId = 3,
                            Height = 9.0999999999999996,
                            Temperature = 29m,
                            TransactionTime = new DateTime(2022, 8, 29, 15, 12, 4, 131, DateTimeKind.Utc).AddTicks(3570),
                            Volume = 2.9408921417415748
                        },
                        new
                        {
                            Id = 9,
                            Density = 604.12799637190585,
                            FuelTankId = 3,
                            Height = 9.0,
                            Temperature = 19m,
                            TransactionTime = new DateTime(2022, 8, 29, 15, 12, 4, 131, DateTimeKind.Utc).AddTicks(3578),
                            Volume = 8.6007063517956226
                        });
                });

            modelBuilder.Entity("Fung.COMMON.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Expires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Fung.COMMON.Entities.RemainingTransactions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<int>("FuelTankId")
                        .HasColumnType("integer");

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("FuelTankId");

                    b.ToTable("RemainingTransactions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FuelTankId = 1,
                            Value = 9.8000000000000007
                        },
                        new
                        {
                            Id = 2,
                            FuelTankId = 1,
                            Value = 9.6999999999999993
                        },
                        new
                        {
                            Id = 3,
                            FuelTankId = 1,
                            Value = 9.5999999999999996
                        },
                        new
                        {
                            Id = 4,
                            FuelTankId = 2,
                            Value = 9.5
                        },
                        new
                        {
                            Id = 5,
                            FuelTankId = 2,
                            Value = 9.4000000000000004
                        },
                        new
                        {
                            Id = 6,
                            FuelTankId = 2,
                            Value = 9.3000000000000007
                        },
                        new
                        {
                            Id = 7,
                            FuelTankId = 3,
                            Value = 9.1999999999999993
                        },
                        new
                        {
                            Id = 8,
                            FuelTankId = 3,
                            Value = 9.0999999999999996
                        },
                        new
                        {
                            Id = 9,
                            FuelTankId = 3,
                            Value = 9.0
                        });
                });

            modelBuilder.Entity("Fung.COMMON.Entities.Station", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Stations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "New Claudebury",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Wintheiserborough",
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "Shadchester",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Fung.COMMON.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2022, 8, 29, 15, 12, 4, 101, DateTimeKind.Utc).AddTicks(7004),
                            Email = "1@gmail.com",
                            IsEmailConfirmed = false,
                            Password = "qIzSBSQ0ystV+FnRwTX7c/d0AvFhBHfs6xu14UL3n7A=",
                            Salt = "i/hcji3ce3iQ5gi3sDfS82JhblXWz3RTFty0jLJ2Eaw="
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2022, 8, 29, 15, 12, 4, 107, DateTimeKind.Utc).AddTicks(1736),
                            Email = "2@gmail.com",
                            IsEmailConfirmed = false,
                            Password = "ETsE5M7nNvhZ7sVpsbb2/he66vp6IuJGTHLPWlT5J6c=",
                            Salt = "uCVBGBb4HbfXoHOmK3rfO3F2bHsG/grd8Q7zcJcbsRw="
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2022, 8, 29, 15, 12, 4, 112, DateTimeKind.Utc).AddTicks(5888),
                            Email = "3@gmail.com",
                            IsEmailConfirmed = false,
                            Password = "ufe5CrZpygjeNHLRmteght9JPEAJJhZqq0g+QbgvqHY=",
                            Salt = "ZLDh9m4nwPy4GKAKIERvJXclelYRJxUDA3mSiWfv35s="
                        });
                });

            modelBuilder.Entity("Fung.COMMON.Entities.FuelTank", b =>
                {
                    b.HasOne("Fung.COMMON.Entities.Station", null)
                        .WithMany()
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Fung.COMMON.Entities.LevelIndicatorTransactions", b =>
                {
                    b.HasOne("Fung.COMMON.Entities.FuelTank", null)
                        .WithMany()
                        .HasForeignKey("FuelTankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Fung.COMMON.Entities.RefreshToken", b =>
                {
                    b.HasOne("Fung.COMMON.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Fung.COMMON.Entities.RemainingTransactions", b =>
                {
                    b.HasOne("Fung.COMMON.Entities.FuelTank", null)
                        .WithMany()
                        .HasForeignKey("FuelTankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Fung.COMMON.Entities.Station", b =>
                {
                    b.HasOne("Fung.COMMON.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
