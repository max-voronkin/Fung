// <auto-generated />
using System;
using Fung.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Fung.DAL.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220830150535_Relations")]
    partial class Relations
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseSerialColumns(modelBuilder);

            modelBuilder.Entity("Fung.COMMON.Entities.FuelTank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<double>("Capacity")
                        .HasColumnType("double precision");

                    b.Property<double>("CurrentAmount")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<int>("StationId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("StationId");

                    b.ToTable("FuelTanks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacity = 10.0,
                            CurrentAmount = 5.5,
                            Name = "aut",
                            Number = 1,
                            StationId = 1,
                            UpdatedAt = new DateTime(2022, 8, 30, 15, 5, 34, 855, DateTimeKind.Utc).AddTicks(9324)
                        },
                        new
                        {
                            Id = 2,
                            Capacity = 10.0,
                            CurrentAmount = 6.5,
                            Name = "eius",
                            Number = 2,
                            StationId = 1,
                            UpdatedAt = new DateTime(2022, 8, 30, 15, 5, 34, 855, DateTimeKind.Utc).AddTicks(9380)
                        },
                        new
                        {
                            Id = 3,
                            Capacity = 10.0,
                            CurrentAmount = 7.5,
                            Name = "ipsa",
                            Number = 3,
                            StationId = 1,
                            UpdatedAt = new DateTime(2022, 8, 30, 15, 5, 34, 855, DateTimeKind.Utc).AddTicks(9391)
                        });
                });

            modelBuilder.Entity("Fung.COMMON.Entities.LevelIndicatorTransactions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<double>("Density")
                        .HasColumnType("double precision");

                    b.Property<int>("FuelTankId")
                        .HasColumnType("integer");

                    b.Property<double>("Height")
                        .HasColumnType("double precision");

                    b.Property<decimal>("Temperature")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("TransactionTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Volume")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("FuelTankId");

                    b.ToTable("LevelIndicatorTransactions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Density = 345.03636019303673,
                            FuelTankId = 1,
                            Height = 9.8000000000000007,
                            Temperature = 15m,
                            TransactionTime = new DateTime(2022, 8, 30, 15, 5, 34, 860, DateTimeKind.Utc).AddTicks(6417),
                            Volume = 9.8589646757488207
                        },
                        new
                        {
                            Id = 2,
                            Density = 725.57673256897465,
                            FuelTankId = 1,
                            Height = 9.6999999999999993,
                            Temperature = 32m,
                            TransactionTime = new DateTime(2022, 8, 30, 15, 5, 34, 860, DateTimeKind.Utc).AddTicks(6480),
                            Volume = 6.3880405985366568
                        },
                        new
                        {
                            Id = 3,
                            Density = 289.04669457533259,
                            FuelTankId = 1,
                            Height = 9.5999999999999996,
                            Temperature = 14m,
                            TransactionTime = new DateTime(2022, 8, 30, 15, 5, 34, 860, DateTimeKind.Utc).AddTicks(6489),
                            Volume = 3.0308851721844454
                        },
                        new
                        {
                            Id = 4,
                            Density = 617.59000086729463,
                            FuelTankId = 2,
                            Height = 9.5,
                            Temperature = 25m,
                            TransactionTime = new DateTime(2022, 8, 30, 15, 5, 34, 861, DateTimeKind.Utc).AddTicks(7769),
                            Volume = 7.1451265360034881
                        },
                        new
                        {
                            Id = 5,
                            Density = 892.08277253755057,
                            FuelTankId = 2,
                            Height = 9.4000000000000004,
                            Temperature = 29m,
                            TransactionTime = new DateTime(2022, 8, 30, 15, 5, 34, 861, DateTimeKind.Utc).AddTicks(7826),
                            Volume = 0.57624244099814037
                        },
                        new
                        {
                            Id = 6,
                            Density = 71.316363453127536,
                            FuelTankId = 2,
                            Height = 9.3000000000000007,
                            Temperature = 5m,
                            TransactionTime = new DateTime(2022, 8, 30, 15, 5, 34, 861, DateTimeKind.Utc).AddTicks(7835),
                            Volume = 7.3647142820276335
                        },
                        new
                        {
                            Id = 7,
                            Density = 314.54952581083728,
                            FuelTankId = 3,
                            Height = 9.1999999999999993,
                            Temperature = 28m,
                            TransactionTime = new DateTime(2022, 8, 30, 15, 5, 34, 862, DateTimeKind.Utc).AddTicks(8430),
                            Volume = 0.64874006092619285
                        },
                        new
                        {
                            Id = 8,
                            Density = 921.47745679263755,
                            FuelTankId = 3,
                            Height = 9.0999999999999996,
                            Temperature = 25m,
                            TransactionTime = new DateTime(2022, 8, 30, 15, 5, 34, 862, DateTimeKind.Utc).AddTicks(8486),
                            Volume = 6.3970933074926268
                        },
                        new
                        {
                            Id = 9,
                            Density = 672.11698748635581,
                            FuelTankId = 3,
                            Height = 9.0,
                            Temperature = 21m,
                            TransactionTime = new DateTime(2022, 8, 30, 15, 5, 34, 862, DateTimeKind.Utc).AddTicks(8494),
                            Volume = 8.3835532734381903
                        });
                });

            modelBuilder.Entity("Fung.COMMON.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Expires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Fung.COMMON.Entities.RemainingTransactions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<int>("FuelTankId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TransactionTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("FuelTankId");

                    b.ToTable("RemainingTransactions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FuelTankId = 1,
                            TransactionTime = new DateTime(2022, 8, 30, 15, 5, 34, 857, DateTimeKind.Utc).AddTicks(2357),
                            Value = 9.8000000000000007
                        },
                        new
                        {
                            Id = 2,
                            FuelTankId = 1,
                            TransactionTime = new DateTime(2022, 8, 30, 15, 5, 34, 857, DateTimeKind.Utc).AddTicks(2419),
                            Value = 9.6999999999999993
                        },
                        new
                        {
                            Id = 3,
                            FuelTankId = 1,
                            TransactionTime = new DateTime(2022, 8, 30, 15, 5, 34, 857, DateTimeKind.Utc).AddTicks(2424),
                            Value = 9.5999999999999996
                        },
                        new
                        {
                            Id = 4,
                            FuelTankId = 2,
                            TransactionTime = new DateTime(2022, 8, 30, 15, 5, 34, 858, DateTimeKind.Utc).AddTicks(4778),
                            Value = 9.5
                        },
                        new
                        {
                            Id = 5,
                            FuelTankId = 2,
                            TransactionTime = new DateTime(2022, 8, 30, 15, 5, 34, 858, DateTimeKind.Utc).AddTicks(4837),
                            Value = 9.4000000000000004
                        },
                        new
                        {
                            Id = 6,
                            FuelTankId = 2,
                            TransactionTime = new DateTime(2022, 8, 30, 15, 5, 34, 858, DateTimeKind.Utc).AddTicks(4843),
                            Value = 9.3000000000000007
                        },
                        new
                        {
                            Id = 7,
                            FuelTankId = 3,
                            TransactionTime = new DateTime(2022, 8, 30, 15, 5, 34, 859, DateTimeKind.Utc).AddTicks(5098),
                            Value = 9.1999999999999993
                        },
                        new
                        {
                            Id = 8,
                            FuelTankId = 3,
                            TransactionTime = new DateTime(2022, 8, 30, 15, 5, 34, 859, DateTimeKind.Utc).AddTicks(5152),
                            Value = 9.0999999999999996
                        },
                        new
                        {
                            Id = 9,
                            FuelTankId = 3,
                            TransactionTime = new DateTime(2022, 8, 30, 15, 5, 34, 859, DateTimeKind.Utc).AddTicks(5157),
                            Value = 9.0
                        });
                });

            modelBuilder.Entity("Fung.COMMON.Entities.Station", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Stations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "South Ignatius",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "West Glendaburgh",
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "Maximusfort",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Fung.COMMON.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2022, 8, 30, 15, 5, 34, 835, DateTimeKind.Utc).AddTicks(7064),
                            Email = "1@gmail.com",
                            IsEmailConfirmed = false,
                            Password = "NP2XltWPHd0AAlgx0QfsYazalYwESl3gC2FfQoOthJU=",
                            Salt = "VR71SoC0Y16NXd/JB28Yb2dDTZ48GXECWCff+rpFYf0="
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2022, 8, 30, 15, 5, 34, 841, DateTimeKind.Utc).AddTicks(3064),
                            Email = "2@gmail.com",
                            IsEmailConfirmed = false,
                            Password = "7Y0bBKo8uS7Z/ycW6G/U8cK5AmWcHssxQcjRSNC8jdM=",
                            Salt = "ZjxbSyCpZX7ijBrLDH+/XvQMBHMHsJ3/VrWxxF5tpSs="
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2022, 8, 30, 15, 5, 34, 846, DateTimeKind.Utc).AddTicks(8256),
                            Email = "3@gmail.com",
                            IsEmailConfirmed = false,
                            Password = "iCAvDT1QA8FT0n0As9QnzTuO+7ilTIvmDdisVMQS/mg=",
                            Salt = "2gv4eunkigV/WKC++mU261hY4NuYM1l7APXqm0DxUoM="
                        });
                });

            modelBuilder.Entity("Fung.COMMON.Entities.FuelTank", b =>
                {
                    b.HasOne("Fung.COMMON.Entities.Station", null)
                        .WithMany("FuelTanks")
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fung.COMMON.Entities.LevelIndicatorTransactions", b =>
                {
                    b.HasOne("Fung.COMMON.Entities.FuelTank", null)
                        .WithMany("LavelTransactions")
                        .HasForeignKey("FuelTankId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fung.COMMON.Entities.RefreshToken", b =>
                {
                    b.HasOne("Fung.COMMON.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Fung.COMMON.Entities.RemainingTransactions", b =>
                {
                    b.HasOne("Fung.COMMON.Entities.FuelTank", null)
                        .WithMany("RemainingTransactions")
                        .HasForeignKey("FuelTankId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fung.COMMON.Entities.Station", b =>
                {
                    b.HasOne("Fung.COMMON.Entities.User", null)
                        .WithMany("Stations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fung.COMMON.Entities.FuelTank", b =>
                {
                    b.Navigation("LavelTransactions");

                    b.Navigation("RemainingTransactions");
                });

            modelBuilder.Entity("Fung.COMMON.Entities.Station", b =>
                {
                    b.Navigation("FuelTanks");
                });

            modelBuilder.Entity("Fung.COMMON.Entities.User", b =>
                {
                    b.Navigation("Stations");
                });
#pragma warning restore 612, 618
        }
    }
}
